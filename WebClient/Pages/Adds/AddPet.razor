@page "/AddPet/{IdFamily:int}/{IdChild:int}"
@using Models
@using WebClient.Data
@using System.Runtime.CompilerServices
@using System.Collections.Immutable
@inject IFamilyService FamilyService 
@inject NavigationManager NavigationManager

@if (_family == null)
{
    <div class="text-center">
        <h1>This family does not exist.</h1>
    </div>
}
else
{
    <div class="align-content-lg-center">
        <EditForm Model="@_newPet">
            <h3>Add Person</h3>

            <div class="form-row">
                <div class="form-group col-md-4">
                    <span class="input-group-text">Name</span>
                    <input type="text" placeholder="Name" class="form-control" @bind-value="_newPet.Name"/>
                </div>
                <div class="form-group col-md-4">
                    <span class="input-group-text">Species</span>
                    <input type="text" placeholder="Species" class="form-control" @bind-value="_newPet.Species"/>
                </div>
                <div class="form-group col-md-4">
                    <span class="input-group-text">Age</span>
                    <input type="number" placeholder="Age" class="form-control" @bind-value="_newPet.Age"/>
                </div>
            </div>
        <div class="form-group">
                        <button class="btn btn-primary btn-sm" @onclick="AddPetForChild">Add</button>
                    </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public int IdFamily { get; set; }
    [Parameter]
    public int IdChild { get; set; }

    private Pet _newPet = new Pet();
    private Family _family = new Family();

    protected override async Task OnParametersSetAsync()
    {
        _family = await FamilyService.GetFamilyAsync(IdFamily);

    }

    public void AddPetForChild()
    {
        Child child = _family.Children.First(c => c.Id == IdChild);
        int indexOfChild = _family.Children.IndexOf(child);
        int max = 0;
        if (_family.Children[indexOfChild].Pets.Count > 0)
        {
            max = _family.Children[indexOfChild].Pets.Max(p => p.Id);
        }
        _newPet.Id = (++max);
        _family.Children[indexOfChild].Pets.Add(_newPet);
        
        //updating
        FamilyService.UpdateAsync(_family);
        NavigationManager.NavigateTo($"/FamilyInfo/{IdFamily}");
    }

}